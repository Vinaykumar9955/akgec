1.1st Assessment

#include <stdio.h>
int main()
{
    int n = 5;

    
    for (int i = 0; i < 2 * n - 1; i++) {

        
        int comp;
        if (i < n) {
            comp = 2 * (n - i) - 1;
        }
        else {
            comp = 2 * (i - n + 1) + 1;
        }

        
        for (int j = 0; j < comp; j++) {
            printf(" ");
        }

        
        for (int k = 0; k < 2 * n - comp; k++) {
            printf("* ");
        }
        printf("\n");
    }
    return 0;
}

2.2nd assessment of test

#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std
bool isPrime(int num) {
    if (num <= 1) return false;
    for (int i = 2; i <= sqrt(num); i++) {
        if (num % i == 0) return false;
    }
    return true;
}


vector<int> rearrangeArray(vector<int>& arr) {
    vector<int> primes;
    vector<int> nonPrimes;

    
    for (int num : arr) {
        if (isPrime(num)) {
            primes.push_back(num);
        } else {
            nonPrimes.push_back(num);
        }
    }

    if (primes.empty()) {
        
        sort(arr.begin(), arr.end(), greater<int>());
        return arr;
    }

    
    int largestPrime = *max_element(primes.begin(), primes.end());
    int smallestPrime = *min_element(primes.begin(), primes.end());

    
    primes.erase(remove(primes.begin(), primes.end(), largestPrime), primes.end());
    primes.erase(remove(primes.begin(), primes.end(), smallestPrime), primes.end());

    
    sort(nonPrimes.begin(), nonPrimes.end(), greater<int>());
    sort(primes.begin(), primes.end(), greater<int>());

    
    vector<int> result;
    result.push_back(largestPrime);
    result.insert(result.end(), nonPrimes.begin(), nonPrimes.end());
    result.insert(result.end(), primes.begin(), primes.end());
    result.push_back(smallestPrime);

    return result;
}

int main() {
    vector<int> example1 = {5, 1, 8, 11, 2};
    vector<int> example2 = {1, 6, 4, 13, 9, 3};

    vector<int> result1 = rearrangeArray(example1);
    vector<int> result2 = rearrangeArray(example2);

    
    for (int num : result1) cout << num << " ";
    cout << endl;

    for (int num : result2) cout << num << " ";
    cout << endl;

    return 0;
}


